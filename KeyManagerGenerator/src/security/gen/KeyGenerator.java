/*
 * KeyGenerator.java
 *
 * Created on __DATE__, __TIME__
 */

package security.gen;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.jasypt.util.text.BasicTextEncryptor;

import security.KeyManager;
import security.ValidatorBeans;
import utils.convertor.BinaryConvertor;
import utils.convertor.StringConvertor;

/*
 * 
 * This is a Key generator for WMS_KeyManager, version 2012.1
 * Author by Kan
 * 
 */

/*
 * 
 *	type	8				[Max 8 key types]		[bit]
 key		50 				[Max 50 chars]			[String]
 expiry	8				[yyyyMMdd]				[String]
 optional field size	2	[Max 99 optional field]	[Integer]
 optional field name 10	[Max 10 char]			[String]
 optional field value 50	[Max 50 char]			[String]
 * 
 */

public class KeyGenerator extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6399902490137996590L;

	//TODO maybe add to key
	//this is the version of keygen, use for validate the key version
	//yyyy.reversion
	private static final String version = "2012.2";

	//license private key
	private static final String licStr = "Sedna-KeyManager-Version-2012-1";

	//http://www.jarvana.com/jarvana/view/de/schlichtherle/truelicense/truelicense-core/1.32/truelicense-core-1.32-sources.jar!/de/schlichtherle/util/StringHandler.java?format=ok
   
//	/**
//     * Obfuscates each given argument.
//     *
//     * @param args The command line arguments.
//     */
//    public static void main(String[] args) {
//    	
//    	String[] string = new String[]{ 
//    			"Sedna", 
//    			"-", 
//    			"KeyManager", 
//    			"-", 
//    			"Version", 
//    			"-", 
//    			"2012", 
//    			"-",
//    			"1"
//    			};
//    	
//        for (int i = 0; i < string.length; i++)
//            System.out.println(obfuscate(string[i]));
//    }

	//Key File Path
	private String filePath = "";
	private String defaultDir = "C:\\Sedna";

	/** Creates new form KeyGenerator */
	public KeyGenerator() {
		initComponents();
		filePath = this.jLabelFilePath.getText();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jFileChooser1 = new javax.swing.JFileChooser();
		jPanel1 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jCheckBox1 = new javax.swing.JCheckBox();
		jCheckBox2 = new javax.swing.JCheckBox();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jTextField1 = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		jTextField2 = new javax.swing.JTextField();
		jLabel9 = new javax.swing.JLabel();
		jButtonBrowser = new javax.swing.JButton();
		jLabelFilePath = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jButtonGenerate = new javax.swing.JButton();
		jLabel6 = new javax.swing.JLabel();
		jLabel8 = new javax.swing.JLabel();
		jTextLabelExpiryDate = new javax.swing.JTextField();
		jLabelStatus = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setFont(new java.awt.Font("Arial", 0, 18));
		jLabel1.setText("WMS Key Generator");

		jLabel2.setText("Key Type");

		jCheckBox1.setText("Mac Address");

		jCheckBox2.setText("HDD Serial (Linux Only)");

		jLabel3.setText("Key");

		jLabel4.setText("Mac Address");

		jLabel5.setText("HDD Serial");

		jLabel9.setText("Expiry Date (" + KeyManager.DATETIME_FORMAT + ")");

		jButtonBrowser.setText("Browser");
		jButtonBrowser.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonBrowserActionPerformed(evt);
			}
		});

		jLabelFilePath.setText("C:\\Sedna\\key");

		jLabel7.setText("Format: {name:10}={value:50} (one field pre line)");

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jButtonGenerate.setText("Generate");
		jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonGenerateActionPerformed(evt);
			}
		});

		jLabel6.setText("Optional Field");

		jLabel8.setText("Key File Path");

		jLabelStatus.setText("Ready.");

		org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								jPanel1Layout
										.createSequentialGroup()
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(jLabel9)
														.add(jLabel1)
														.add(jLabel2)
														.add(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				jCheckBox1)
																		.add(
																				18,
																				18,
																				18)
																		.add(
																				jCheckBox2))
														.add(jLabel3)
														.add(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				jPanel1Layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jLabel5)
																						.add(
																								jLabel4))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				jPanel1Layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jTextField1,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								195,
																								Short.MAX_VALUE)
																						.add(
																								jTextField2,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								195,
																								Short.MAX_VALUE)))
														.add(jLabel6)
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																jPanel1Layout
																		.createSequentialGroup()
																		.add(
																				7,
																				7,
																				7)
																		.add(
																				jLabelFilePath)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED,
																				125,
																				Short.MAX_VALUE)
																		.add(
																				jButtonBrowser))
														.add(jLabel8)
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																jPanel1Layout
																		.createSequentialGroup()
																		.add(
																				jLabelStatus)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED,
																				161,
																				Short.MAX_VALUE)
																		.add(
																				jButtonGenerate))
														.add(
																jScrollPane1,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																285,
																Short.MAX_VALUE)
														.add(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				jTextLabelExpiryDate,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				273,
																				Short.MAX_VALUE))
														.add(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				jLabel7,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								jPanel1Layout
										.createSequentialGroup()
										.add(jLabel1)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel2)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.UNRELATED)
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jCheckBox1).add(
																jCheckBox2))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel3)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jLabel4)
														.add(
																jTextField1,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jLabel5)
														.add(
																jTextField2,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.add(8, 8, 8)
										.add(jLabel9)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jTextLabelExpiryDate,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.add(6, 6, 6)
										.add(jLabel6)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel7)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jScrollPane1,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												146,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel8)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.BASELINE)
														.add(jLabelFilePath)
														.add(jButtonBrowser))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												jPanel1Layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(jButtonGenerate)
														.add(
																jLabelStatus,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																25,
																Short.MAX_VALUE))
										.addContainerGap(
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().addContainerGap().add(jPanel1,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(jPanel1,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {
		if (!hasCheckedVaildator()) {
			JOptionPane.showMessageDialog(this,
					"Please select at least one validator!", "Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		if (!this.jTextLabelExpiryDate.getText().equals("")
				&& this.jTextLabelExpiryDate.getText().length() != 8) {
			JOptionPane.showMessageDialog(this, "Expiry Date Format Wrong!",
					"Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		if (!hasEnterAllKey()) {
			JOptionPane.showMessageDialog(this, "Please Enter Key[s]", "Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		//this is the raw key
		StringBuffer rawKey = new StringBuffer();

		//appending validator type with 8 bit binary
		byte validatorType = 0;

		if (jCheckBox1.isSelected()) {
			validatorType |= ValidatorBeans.indexToByte(0);
		}
		if (jCheckBox2.isSelected()) {
			validatorType |= ValidatorBeans.indexToByte(1);
		}

		rawKey.append(StringConvertor.addBefore(BinaryConvertor.toBinaryString(validatorType), '0', 8));

		//appending validator key
		if (jCheckBox1.isSelected()) {
			rawKey.append(StringConvertor.addSpaceAfter(jTextField1.getText()
					.replace(":", "-").toUpperCase(),//Mac address, need to replace : to - and to Upper
					50));
		}
		if (jCheckBox2.isSelected()) {
			rawKey.append(StringConvertor.addSpaceAfter(jTextField2.getText(),
					50));
		}

		//appending expiryDate
		if (this.jTextLabelExpiryDate.getText().equals("")) {
			rawKey.append("00000000");
		} else {
			rawKey.append(this.jTextLabelExpiryDate.getText());
		}

		//appending optional field
		rawKey.append(jTextArea1.getText());

		File file = new File(this.filePath);
		if (file.exists()) {
			file.delete();
		}
		try {
			file.createNewFile();
			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(file), "utf8"));
			BasicTextEncryptor textEncryptor = new BasicTextEncryptor();
			textEncryptor.setPassword(licStr);
			String key = textEncryptor.encrypt(rawKey.toString());
			bw.write(key);
			bw.flush();
			bw.close();
			key = null;

			//Success status
			jLabelStatus.setText("Success!");

		} catch (UnsupportedEncodingException e) {
			jLabelStatus.setText("Fail! " + e);
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			jLabelStatus.setText("Fail! " + e);
			e.printStackTrace();
		} catch (IOException e) {
			jLabelStatus.setText("Fail! " + e);
			e.printStackTrace();
		}
		rawKey = null;
	}

	private void jButtonBrowserActionPerformed(java.awt.event.ActionEvent evt) {
		jFileChooser1.setMultiSelectionEnabled(false);
		jFileChooser1.setCurrentDirectory(new File(defaultDir));
		jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
		if (jFileChooser1.showSaveDialog(getContentPane()) == JFileChooser.APPROVE_OPTION) {
			String data = (jFileChooser1.getSelectedFile().getAbsolutePath());
			this.jLabelFilePath.setText(data);
			this.filePath = data;
		}
	}

	private boolean hasCheckedVaildator() {
		if (jCheckBox1.isSelected()) {
			return true;
		}
		if (jCheckBox2.isSelected()) {
			return true;
		}
		return false;
	}

	private boolean hasEnterAllKey() {
		boolean result = true;
		if (jCheckBox1.isSelected()) {
			if (jTextField1.getText().length() == 0) {
				result = false;
			}
		}
		if (jCheckBox2.isSelected()) {
			if (jTextField2.getText().length() == 0) {
				result = false;
			}
		}
		return result;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new KeyGenerator().setVisible(true);
			}
		});
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButtonBrowser;
	private javax.swing.JButton jButtonGenerate;
	private javax.swing.JCheckBox jCheckBox1;
	private javax.swing.JCheckBox jCheckBox2;
	private javax.swing.JFileChooser jFileChooser1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JLabel jLabelFilePath;
	private javax.swing.JLabel jLabelStatus;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JTextField jTextField2;
	private javax.swing.JTextField jTextLabelExpiryDate;
	// End of variables declaration//GEN-END:variables

}